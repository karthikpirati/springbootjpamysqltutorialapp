1) google spring initialzr
2) enter articraft id as project name
3) choose spring we, jpa and my sql driver as dependencies
4) download
5) Open eclipse from  a workspace
6) File -> import existing maven project and choose downloaded project

-----------------------------------------------------------------------


add the database configuartion in application.properties
which is available in src/main/resources

spring.datasource.url=jdbc:mysql://localhost:3306/springboot
spring.datasource.username=root
spring.datasource.password=pirati23
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect

server.port=9090


---------------------------------------------------------------------------


MVC archirtecture : 

1) Every request that we made to Spring Boot application will be intercepted by dispatcher servlet
2) dispatcher servlet is the front end controller
3) Based on the request url dispatcher servlet will find the controller and forward the request to it.
4) Now request will forwarded to Controller layer
5) Controller layer do the following :
	a) Convert data in json/xml/csv to Java Object (@RestController)
	b) Validate the data 
	c) If the data is not return the response with corresponding status code

6) If data is good then control moves from Controller layer to Service layer with data we got.
7) In Service layer we do all the business and send the calculated data to Repository layer
8) Repository layer interacts with database and do database operation

Code : 

Create three packages for controller ,service and repository,models

1) Create the controller class and annotate with @RestController
2) Business logic and Databases might change in future
3) So create interface for Service and Repository layer
4) Provide their implementation via Implementation classes.
5) Annotate the service layer with @service annotation
6) Annotate the repository layer with @Repository annotation
7) All the database mapping classes should be placed inside model package.


--------------------------------------------------------------------------------------------
 
Annotations : 

1) SpringBootApplication : 

@SpringBootApplication annotation is a combination of three annotations :
 	@SpringBootApplication = @Configuration + @ComponentScan + @EnableAutoConfiguration

 a) @EnableAutoConfiguration : to enable Spring Boot's auto-configuration feature.
 Auto configuration will auto configure features like embedded tomcat server and we have already 
 seen we are not writing any code to connect to database which is automatically configured internally 
 with help of @EnableAutoConfiguration
 
 EnableAutoConfiguration does auto configuration depends on jar file we added 
 eg : In out project we added spring-boot-starter-data-jpa and mysql-connector-java dependencies
 so instead of we writing hibernate code to connect to database internally spring boot is taking care to connect
 to database
 
 Not only this it is doing lot of other things
 
 In order for Spring to do auto configuration we need to add @SpringBootApplication
 spring initialzr is taking care of adding this annotation while creating so we dont add this specifically
 We dont need to add EnableAutoConfiguration annotation seperately beacuse @SpringBootApplication internally contains this.
 
 
 Let say we dont want Spring Boot oc configuare database for us we can exclude that by using 
 
 @SpringBootApplication(exclude={DataSourceAutoConfiguration.class})
 ---------------------------------
 b) @Configuration to enable Java-based configuration
  Let say we want to do our own configuartion we can create class and annoatate with @Configuration
  create a method with @Bean and write the code.
  
  
  @Configuration
	public class DataBaseConfiguartion {
  @Bean
    public DataSource getDataSource() 
    {
        DataSourceBuilder dataSourceBuilder = DataSourceBuilder.create();
        dataSourceBuilder.driverClassName("com.mysql");
        dataSourceBuilder.url("jdbc:mysql://localhost:3306/springboot");
        dataSourceBuilder.username("sa");
        dataSourceBuilder.password("");
        return dataSourceBuilder.build();
    }
	
	
   @Bean // will inject HibernateTemplte reference to every variable where @Autowired is used.
   public HibernateTemplte getTemplate() {
      return new HibernateTemplte(getDataSource() )
   }
   
   
   //all service in projecvt
   @Autowirted
   private HibernateTemplte template;
}
-------------------------------------------------------------------------------------
@Bean annotation is used to let Spring framework know that this method s
hould be used to get the bean implementation to inject in Component classes.

@Bean will be used to inject the bean when we created the object using new keyword instead of spring container
in class annotated with @Configuartion

Means we dont wont use @Controller or @Service or @Repository or @Component annotations to create the objects
instead we create the object inside the method 

public HibernateTemplte getibernateTemplte(){
 return new HibernateTemplte(getDataSource() )
}

If you observe this method is returning HibernateTemplte object which meeans object is created 
The only thing remaining is to inject this object to variable

so for that we use @Autowired
@Autowired
private HibernateTemplte hibernateTemplete;

---------------------------------------------------------------
 c) @ComponentScan annotation is used to specify the packages to look for Component classes.
	SpringBootAnnotation will create the annotation 
	we can pass the package names to this annotation
	Spring boot create the beans only for classes that configured inside this packages. 
----------------------------------------------------------
2) The Annotation to mark as Spring beans

@Controller
@Service
@Repository
@Component

when we annotate the class with this annotation spring container create single object of each per project
Since spring container takes care of creating the objects they are called spring beans
So by default all spring beans are singleton(one object for whole project)

Rest api annotations

@RestController = @Controller and @ResponseBody 

 * @SpringBootApplication annotation is a combination of three annotations :
	@SpringBootApplication = @Configuration + @ComponentScan + @EnableAutoConfiguration
	
	
 * @Configuration to enable Java-based configuration
 * @ComponentScan annotation is used to specify the packages to look for Component classes.
 * @EnableAutoConfiguration to enable Spring Boot's auto-configuration feature.

-------------------------------------------------------------------------------------------
Singleton Design pattern :

1) private constructor (to restrict from creating objects from other classes)
2) private variable which holds single instance
3) public static method to return that single instance

-------------------------------------------------------------------------------------------

@Value() -- use to read data from properties file.

-------------------------------------------------------------------------------------------

We all know that HTTP is a stateless protocol. All requests and responses are independent.

The server cannot distinguish between new visitors and returning visitors. 
But sometimes we may need to keep track of client's activity across multiple requests. 
This is achieved using Session Management. 
It is a mechanism used by the Web container to store session information for a particular user.

spring HttpSession

spring.session.timeout.seconds=900


List<String> messages = (List<String>) session.getAttribute("MY_SESSION_MESSAGES");
request.getSession().setAttribute("MY_SESSION_MESSAGES", messages);
request.getSession().invalidate();

---------------------------------------------------------------------------------------------

1)By auto configuration - it is reducing lot of boiler plate code
all we have to is add requierd dependency and properties in application.properties file

2)Embedded tomcat server(not only tomat it is also providing )


